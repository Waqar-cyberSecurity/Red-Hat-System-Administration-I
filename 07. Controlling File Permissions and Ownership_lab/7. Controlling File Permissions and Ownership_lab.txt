Lab 7: Controlling File Permissions and Ownership
Objectives
By the end of this lab, you will be able to:

View and interpret Linux file permissions using ls -l
Modify permissions using chmod, chown, and chgrp
Configure special permission bits (SUID, SGID, sticky bit)
Inspect SELinux security contexts
Apply proper file ownership and permission management in Linux environments
Prerequisites
A machine running Linux (Fedora, RHEL, or CentOS recommended)
Basic familiarity with Linux command line
Root or sudo privileges for certain commands
Lab Setup
Open a terminal
Create a practice directory:
mkdir ~/permissions_lab
cd ~/permissions_lab
Task 1: Viewing File Permissions
Subtask 1.1: Understanding ls -l Output
Create sample files:
touch file1.txt
mkdir dir1
View permissions:
ls -l
Expected Output:

-rw-r--r-- 1 user user 0 Jan 1 10:00 file1.txt
drwxr-xr-x 2 user user 4096 Jan 1 10:00 dir1
Explanation:

First character: - for file, d for directory
Next 9 characters: permissions (rwx for owner/group/others)
Following numbers: link count, owner, group, size, timestamp, name
Subtask 1.2: Viewing Hidden Files
ls -la
Task 2: Modifying Permissions
Subtask 2.1: Using chmod (Symbolic Mode)
Add execute permission for owner:
chmod u+x file1.txt
ls -l file1.txt
Remove read from group:
chmod g-r file1.txt
Set specific permissions:
chmod u=rwx,g=rx,o= file1.txt
Subtask 2.2: Using chmod (Numeric Mode)
Set permissions to 755 (rwxr-xr-x):
chmod 755 file1.txt
Set restrictive permissions (600):
chmod 600 file1.txt
Common Permission Values:

755: Owner RWX, Group/Others RX
644: Owner RW, Group/Others R
700: Owner RWX, Group/Others nothing
Task 3: Managing Ownership
Subtask 3.1: Using chown
Change file owner (requires sudo):
sudo chown root file1.txt
ls -l file1.txt
Change owner and group simultaneously:
sudo chown user:users file1.txt
Subtask 3.2: Using chgrp
Change group ownership:
sudo chgrp wheel file1.txt
Task 4: Special Permission Bits
Subtask 4.1: SUID (Set User ID)
Set SUID on a binary:
which passwd  # Find location of passwd binary
ls -l /usr/bin/passwd
sudo chmod u+s /usr/bin/passwd
Explanation: SUID makes executable run with owner's privileges

Subtask 4.2: SGID (Set Group ID)
Set SGID on directory:
mkdir shared_dir
sudo chmod g+s shared_dir
Effect: New files inherit directory's group

Subtask 4.3: Sticky Bit
Set sticky bit on shared directory:
sudo chmod +t /tmp
ls -ld /tmp
Purpose: Only file owners can delete files in sticky directories

Task 5: SELinux Contexts
Subtask 5.1: Viewing Contexts
Install SELinux tools if needed:
sudo dnf install policycoreutils-python-utils
View file context:
ls -Z file1.txt
Subtask 5.2: Modifying Contexts
Change context (example for web content):
sudo chcon -t httpd_sys_content_t file1.txt
Restore default context:
sudo restorecon -v file1.txt
Troubleshooting Tips
Permission denied errors:

Check current permissions with ls -l
Verify your user has sufficient privileges
Check SELinux context if permissions seem correct but access is denied
Ownership changes not working:

Ensure you have root/sudo
Verify user/group exists (getent passwd, getent group)
Special bits not showing:

Use ls -l - SUID shows as 's' in owner execute, SGID in group execute, sticky in others execute
Conclusion
In this lab, you have:

Learned to interpret and modify Linux file permissions
Practiced changing ownership with chown and chgrp
Configured special permission bits (SUID, SGID, sticky)
Explored basic SELinux context management
These skills are essential for:

Securing container environments
Managing multi-user systems
Properly configuring services in OpenShift/Podman environments
Cleanup
Remove practice files:

rm -rf ~/permissions_lab
Further Exploration
Experiment with ACLs (Access Control Lists) using setfacl/getfacl
Research how these concepts apply to container storage
Explore Podman's --security-opt flags for permission controls