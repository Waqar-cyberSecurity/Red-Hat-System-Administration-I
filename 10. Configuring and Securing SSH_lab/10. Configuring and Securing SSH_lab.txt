Lab 10: Configuring and Securing SSH
Objectives
By the end of this lab, you will be able to:

Install and configure the OpenSSH server for secure remote access.
Modify SSH server settings (sshd_config) to enhance security.
Implement key-based authentication for SSH.
Configure firewall rules to restrict SSH access.
Prerequisites
A Linux-based system (Ubuntu/CentOS/RHEL) with sudo privileges.
Basic knowledge of Linux command-line operations.
A terminal emulator (e.g., GNOME Terminal, Konsole).
Task 1: Install OpenSSH Server
Step 1.1: Check if SSH is Installed
Run the following command to verify if OpenSSH is already installed:

ssh -V
Expected Output:

OpenSSH_8.9p1 Ubuntu-3, OpenSSL 3.0.2 15 Mar 2022  
If not installed, proceed to Step 1.2.

Step 1.2: Install OpenSSH Server
For Debian/Ubuntu:

sudo apt update && sudo apt install openssh-server -y
For RHEL/CentOS:

sudo dnf install openssh-server -y
Step 1.3: Verify SSH Service Status
sudo systemctl status ssh
Expected Outcome:

Service should be active (running).
Troubleshooting Tip:
If SSH is not running, start it with:

sudo systemctl start ssh
Task 2: Modify /etc/ssh/sshd_config for Security
Step 2.1: Backup the Original Config File
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
Step 2.2: Edit sshd_config
Open the file in a text editor (e.g., nano):

sudo nano /etc/ssh/sshd_config
Key Security Modifications
Change Default SSH Port (Optional but Recommended)
Port 2222  # Replace 2222 with a non-standard port  
Disable Root Login
PermitRootLogin no  
Restrict Authentication Methods
PasswordAuthentication no  
PubkeyAuthentication yes  
Limit User Access (Optional)
AllowUsers your_username  
Step 2.3: Restart SSH Service
sudo systemctl restart ssh
Verification:

ss -tulnp | grep ssh
Expected Output:

tcp   LISTEN 0      128    0.0.0.0:2222     0.0.0.0:*    users:(("sshd",pid=1234,fd=3))  
Troubleshooting Tip:
If SSH fails to restart, check logs:

sudo journalctl -xe
Task 3: Generate SSH Keys for Key-Based Authentication
Step 3.1: Generate Key Pair (Client-Side)
ssh-keygen -t ed25519 -C "your_email@example.com"
Press Enter to accept default file location (~/.ssh/id_ed25519).
Optionally, set a passphrase for extra security.
Step 3.2: Copy Public Key to Server
ssh-copy-id -p 2222 username@server_ip
(Replace 2222 with your SSH port if changed.)

Step 3.3: Test Key-Based Login
ssh -p 2222 username@server_ip
Expected Outcome:

You should log in without a password (if passphrase was set, you'll be prompted for it).
Troubleshooting Tip:
If login fails, verify permissions:

chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys
Task 4: Configure Firewall for SSH
Step 4.1: Allow SSH Port in Firewall
For UFW (Ubuntu):

sudo ufw allow 2222/tcp  
sudo ufw enable  
For firewalld (RHEL/CentOS):

sudo firewall-cmd --permanent --add-port=2222/tcp  
sudo firewall-cmd --reload  
Step 4.2: Verify Firewall Rules
For UFW:

sudo ufw status  
For firewalld:

sudo firewall-cmd --list-ports  
Expected Output:

2222/tcp  
Conclusion
In this lab, you:
âœ” Installed and secured OpenSSH server.
âœ” Modified sshd_config to disable root login and enforce key-based authentication.
âœ” Generated SSH keys for passwordless login.
âœ” Configured the firewall to restrict SSH access.

Next Steps:

Test SSH access from another machine.
Consider setting up fail2ban for brute-force protection.
Final Verification:

ssh -p 2222 username@server_ip
(Should log in without a password if key-based auth is working.)

Lab Complete! ðŸŽ‰