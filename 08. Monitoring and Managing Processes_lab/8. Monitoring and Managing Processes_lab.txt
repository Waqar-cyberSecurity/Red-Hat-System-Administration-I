Lab 8: Monitoring and Managing Processes
Objectives
By the end of this lab, you will be able to:

View**, inspect**, and control running processes
Use ps, top, and htop to monitor system processes
Send signals to processes using kill, pkill, and killall
Manage job control with bg, fg, and jobs
Adjust process priority using nice and renice
Prerequisites
A Linux-based system (Ubuntu 22.04/CentOS Stream 9)
Terminal access with sudo privileges
Basic familiarity with Linux command line
htop installed (Install with sudo apt install htop or sudo dnf install htop)
Lab Tasks
Task 1: Viewing Processes with ps, top, and htop
Subtask 1.1: List Processes with ps
Open a terminal.

Run the following command to list all running processes:

ps aux
a: Show processes for all users
u: Display user-oriented format
x: Include processes not attached to a terminal
Expected Output:
A detailed list of processes with columns like USER, PID, %CPU, and COMMAND.

To filter for a specific process (e.g., nginx):

ps aux | grep nginx
Subtask 1.2: Monitor Processes Dynamically with top
Run:

top
Press q to quit.
Press Shift + M to sort by memory usage.
Expected Output:
A real-time updating display of system processes, CPU, and load averages.

Subtask 1.3: Use htop for an Interactive View
If not installed, install htop:

sudo apt install htop    # Ubuntu/Debian
sudo dnf install htop    # CentOS/RHEL
Run:

htop
Use arrow keys to navigate.
Press F6 to sort by different columns.
Expected Output:
A color-coded, interactive process manager.

Task 2: Sending Signals to Processes
Subtask 2.1: Terminate a Process with kill
Find the PID of a process (e.g., firefox):

pidof firefox
(Alternatively, use ps aux | grep firefox.)

Send a SIGTERM (graceful termination):

kill <PID>
Or force kill with SIGKILL:

kill -9 <PID>
Expected Outcome:
The specified process terminates.

Subtask 2.2: Kill Processes by Name with pkill and killall
Terminate all instances of firefox:

pkill firefox
Or:

killall firefox
Expected Outcome:
All firefox processes are terminated.

Task 3: Job Control (jobs, fg, bg)
Subtask 3.1: Manage Background and Foreground Jobs
Start a long-running process (e.g., sleep 300) in the background:

sleep 300 &
List active jobs:

jobs
Expected Output:
[1]+ Running sleep 300 &

Bring a background job to the foreground:

fg %1
(Press Ctrl + Z to pause it.)

Resume a paused job in the background:

bg %1
Task 4: Adjusting Process Priority (nice, renice)
Subtask 4.1: Start a Process with Modified Priority
Launch sleep with a high nice value (lower priority):
nice -n 10 sleep 300 &
(Default nice value is 0; range is -20 (highest priority) to 19 (lowest).)
Subtask 4.2: Change Priority of a Running Process
Find the PID of the sleep process:
pgrep sleep
Reduce its priority further:
sudo renice -n 15 -p <PID>
Expected Outcome:
The processâ€™s nice value updates to 15.
Conclusion
In this lab, you learned to:

Monitor processes using ps, top, and htop.
Terminate processes with kill, pkill, and killall.
Manage jobs using bg, fg, and jobs.
Adjust process priority with nice and renice.
These skills are essential for efficient system administration and troubleshooting in Linux environments.

Troubleshooting Tips
If htop fails to install, ensure your package manager is updated (sudo apt update or sudo dnf update).
Use kill -l to list all available signals.
If renice fails, ensure you have sudo privileges.
Next Steps
Explore systemd for advanced process management.
Learn about cgroups for resource control in containers.
